import asyncio
import os
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)
from telegram.ext._application import Application
from aiohttp import web
from openai import OpenAI

# üîê –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "sk-pPpKsDfa2345d7890xYzvkLmdOpQwKrTft2t3r8t5t1t1")
ASSISTANT_ID = os.getenv("ASSISTANT_ID", "asst_55S2IE1d4Q4ii9VL1BNBw1UC")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "7979730053:AAFDIiocR9IsfOj7bimP_ZP8rYgAdS3MCm0")
WEBHOOK_URL = os.getenv("WEBHOOK_URL", "https://telegram-gpt-assistant.onrender.com/")  # –£–∫–∞–∂–∏ —Å–≤–æ–π Render URL

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
client = OpenAI(api_key=OPENAI_API_KEY)

# –û—Ç–≤–µ—Ç –æ—Ç GPT-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
async def ask_assistant(user_message):
    thread = client.beta.threads.create()
    client.beta.threads.messages.create(
        thread_id=thread.id,
        role="user",
        content=user_message
    )
    run = client.beta.threads.runs.create(
        thread_id=thread.id,
        assistant_id=ASSISTANT_ID
    )

    while True:
        run = client.beta.threads.runs.retrieve(thread_id=thread.id, run_id=run.id)
        if run.status == "completed":
            break
        await asyncio.sleep(1)

    messages = client.beta.threads.messages.list(thread_id=thread.id)
    return messages.data[0].content[0].text.value

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text
    print(f"[LOG] –°–æ–æ–±—â–µ–Ω–∏–µ: {user_message}")

    try:
        response = await ask_assistant(user_message)
        chunks = [response[i:i+4000] for i in range(0, len(response), 4000)]
        for chunk in chunks:
            await update.message.reply_text(chunk)
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥. –ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Telegram
async def webhook_handler(request):
    data = await request.json()
    update = Update.de_json(data, bot)
    await application.update_queue.put(update)
    return web.Response()

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async def main():
    global application, bot

    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()  # type: Application
    bot = application.bot

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # Aiohttp –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = web.Application()
    app.router.add_post("/webhook", webhook_handler)
    runner = web.AppRunner(app)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
    await bot.set_webhook(url=f"{WEBHOOK_URL}/webhook")
    print("ü§ñ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", int(os.environ.get("PORT", 8444)))
    await site.start()

    print(f"‚úÖ –ë–æ—Ç —Å–ª—É—à–∞–µ—Ç –Ω–∞ {WEBHOOK_URL}/webhook")

    await application.initialize()
    await application.start()

    # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (–Ω–µ polling!)
    await asyncio.Event().wait()
    
if __name__ == "__main__":
    asyncio.run(main())

